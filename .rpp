#!/bin/sh
#
# rperre's PROMPT
# This should be included on your bash profile script
#

# Terminal output control (http://www.termsys.demon.co.uk/vtansi.htm)

TC='\e['

CLR_LINE_START="${TC}1K"
CLR_LINE_END="${TC}K"
CLR_LINE="${TC}2K"

# Hope no terminal is greater than 1k columns
RESET_LINE="${CLR_LINE}${TC}1000D"

# Colors and styles (based on https://github.com/demure/dotfiles/blob/master/subbash/prompt)

Bold="${TC}1m"    # Bold text only, keep colors
Undr="${TC}4m"    # Underline text only, keep colors
Inv="${TC}7m"     # Inverse: swap background and foreground colors
Reg="${TC}22;24m" # Regular text only, keep colors
RegF="${TC}39m"   # Regular foreground coloring
RegB="${TC}49m"   # Regular background coloring
Rst="${TC}0m"     # Reset all coloring and style

# Basic            High Intensity      Background           High Intensity Background
Black="${TC}30m";  IBlack="${TC}90m";  OnBlack="${TC}40m";  OnIBlack="${TC}100m";
Red="${TC}31m";    IRed="${TC}91m";    OnRed="${TC}41m";    OnIRed="${TC}101m";
Green="${TC}32m";  IGreen="${TC}92m";  OnGreen="${TC}42m";  OnIGreen="${TC}102m";
Yellow="${TC}33m"; IYellow="${TC}93m"; OnYellow="${TC}43m"; OnIYellow="${TC}103m";
Blue="${TC}34m";   IBlue="${TC}94m";   OnBlue="${TC}44m";   OnIBlue="${TC}104m";
Purple="${TC}35m"; IPurple="${TC}95m"; OnPurple="${TC}45m"; OnIPurple="${TC}105m";
Cyan="${TC}36m";   ICyan="${TC}96m";   OnCyan="${TC}46m";   OnICyan="${TC}106m";
White="${TC}37m";  IWhite="${TC}97m";  OnWhite="${TC}47m";  OnIWhite="${TC}107m";

# examples
# echo "${Bold}${Red}bold red on ${OnBlue}blue background,${RegB} now back to regular background, ${RegF}regular foreground and ${Reg}regular text"
# echo "${Bold}${Undr}${Green}You can reset this whole style in one${Rst} command"
# echo -n "${Bold}${Blue}${OnWhite}bold blue text on white background${Rst}"; sleep 3; echo "${RESET_LINE}${Red}${OnYellow}becomes red text on yellow background${Rst}"

#
# Ruby Bundle helper
#
bund(){
  # Check if ruby project
  if [ -f Gemfile ]; then
    # Check if its up to date
    check="$(bundle check | grep 'dependencies are satisfied')"
    if [ "$check" = "" ]; then
        # If its not, update
        printf "${Yellow}Bundling...${Rst}"
        bundle="$(bundle install)"
        # Check return code from `bundle install`
        if [ "$?" = "0" ]; then
          # If success, check if installed
          success="$(echo "$bundle" | grep 'Bundle complete!')"
          if [ "$success" != "" ]; then
            # Installed
            printf "${Green}${Bold}$success${Rst}\n"
            return 0
          else
            # If not installed, check if updated
            updated="$(echo "$bundle" | grep 'Updating ')"
            if [ "$updated" != "" ]; then
                # Updated
                printf "${Green}${Bold}$updated${Rst}\n"
                return 0
              else
                complete="$(echo "$bundle" | grep 'Your bundle is complete!')"
                if [ "$complete" != "" ]; then
                  message="${Green}${Bold}$complete${Rst}\n"
                  postmessages="$(echo "$bundle" | sed -n -e '/Post-install message /,$p')"
                  if [ "$complete" != "" ]; then
                    message+="${Yellow}${Bold}$complete${Rst}\n"
                  else
                    # Unknown success message
                    printf "${Green}${Bold}$bundle${Rst}\n"
                    return 0
                  fi;
                else
                  # Unknown success message
                  printf "${Green}${Bold}$bundle${Rst}\n"
                  return 0
                fi;
            fi;
          fi;
        else
          # Error message
          printf "${Red}${Bold}$bundle${Rst}\n"
          return 1
        fi;
    else
      # up to date
      printf "${Green}$check${Rst}\n"
      return 0
    fi;
  else
    # Not a ruby project
    printf "${Red}Could not locate Gemfile${Rst}\n"
    return 1
  fi;
}

# Function to generate PS1 after CMDs
PROMPT_COMMAND=__prompt_command

__prompt_command() {
		# This needs to be first
    local EXIT="$?"

    PS1=""

		### Colors to Vars ### {{{
		## Inspired by http://wiki.archlinux.org/index.php/Color_Bash_Prompt#List_of_colors_for_prompt_and_Bash
		## Terminal Control Escape Sequences: http://www.termsys.demon.co.uk/vtansi.htm
		## Consider using some of: https://gist.github.com/bcap/5682077#file-terminal-control-sh
		## Can unset with `unset -v {,B,U,I,BI,On_,On_I}{Bla,Red,Gre,Yel,Blu,Pur,Cya,Whi} RCol`
		local RCol='\[\e[0m\]'	# Text Reset

		# Regular                    Bold                          Underline                     High Intensity                BoldHigh Intensity             Background                High Intensity Backgrounds
		local Bla='\[\e[0;30m\]';    local BBla='\[\e[1;30m\]';    local UBla='\[\e[4;30m\]';    local IBla='\[\e[0;90m\]';    local BIBla='\[\e[1;90m\]';    local On_Bla='\e[40m';    local On_IBla='\[\e[0;100m\]';
		local Red='\[\e[0;31m\]';    local BRed='\[\e[1;31m\]';    local URed='\[\e[4;31m\]';    local IRed='\[\e[0;91m\]';    local BIRed='\[\e[1;91m\]';    local On_Red='\e[41m';    local On_IRed='\[\e[0;101m\]';
		local Gre='\[\e[0;32m\]';    local BGre='\[\e[1;32m\]';    local UGre='\[\e[4;32m\]';    local IGre='\[\e[0;92m\]';    local BIGre='\[\e[1;92m\]';    local On_Gre='\e[42m';    local On_IGre='\[\e[0;102m\]';
		local Yel='\[\e[0;33m\]';    local BYel='\[\e[1;33m\]';    local UYel='\[\e[4;33m\]';    local IYel='\[\e[0;93m\]';    local BIYel='\[\e[1;93m\]';    local On_Yel='\e[43m';    local On_IYel='\[\e[0;103m\]';
		local Blu='\[\e[0;34m\]';    local BBlu='\[\e[1;34m\]';    local UBlu='\[\e[4;34m\]';    local IBlu='\[\e[0;94m\]';    local BIBlu='\[\e[1;94m\]';    local On_Blu='\e[44m';    local On_IBlu='\[\e[0;104m\]';
		local Pur='\[\e[0;35m\]';    local BPur='\[\e[1;35m\]';    local UPur='\[\e[4;35m\]';    local IPur='\[\e[0;95m\]';    local BIPur='\[\e[1;95m\]';    local On_Pur='\e[45m';    local On_IPur='\[\e[0;105m\]';
		local Cya='\[\e[0;36m\]';    local BCya='\[\e[1;36m\]';    local UCya='\[\e[4;36m\]';    local ICya='\[\e[0;96m\]';    local BICya='\[\e[1;96m\]';    local On_Cya='\e[46m';    local On_ICya='\[\e[0;106m\]';
		local Whi='\[\e[0;37m\]';    local BWhi='\[\e[1;37m\]';    local UWhi='\[\e[4;37m\]';    local IWhi='\[\e[0;97m\]';    local BIWhi='\[\e[1;97m\]';    local On_Whi='\e[47m';    local On_IWhi='\[\e[0;107m\]';
		### End Color Vars ### }}}

		# Checks for git folder
		if [ "$(echo `git rev-parse --git-dir 2> /dev/null;`)"  != "" ]; then
			local isGit=true
		else
			local isGit=false
		fi;

    newline=false
		if [ "$isGit" = true ]; then
			branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

			modified=`git ls-files -m 2> /dev/null | wc -l`
			untracked=`git ls-files --others --exclude-standard 2> /dev/null | wc -l`
			staged=`git diff --cached --numstat 2> /dev/null | wc -l`
			npushed=`git log --branches --not --remotes 2> /dev/null | grep "commit "| wc -l`

      currentPath=`pwd`

      if [ "$(basename $currentPath)" = ".git" ]; then
        currentPath="$(dirname $currentPath)"
        currentPath="$(basename $currentPath)"
      else
        foldername=$(basename `git rev-parse --show-toplevel` 2>/dev/null)
      fi;

			# Choose branch color
			if [ "$branch" = "master" ]; then
				BCOLOR="${URed}"
			else
				BCOLOR="${ICya}"
			fi;

			PS1+="${IWhi}{${IBlu}$foldername${RCol}${IWhi}/${BCOLOR}${branch//[[:blank:]]/}${IWhi}}${RCol} "

			UPSTREAM=${1:-'@{u}'}
			LOCAL=$(git rev-parse @)
			REMOTE=$(git rev-parse "$UPSTREAM")
			BASE=$(git merge-base @ "$UPSTREAM")

			if [ $LOCAL = $REMOTE ]; then
			    PS1+="${Gre}Up-to-date${RCol} "
			elif [ $LOCAL = $BASE ]; then
			    PS1+="${Red}Need to pull${RCol} "
			elif [ $REMOTE = $BASE ]; then
					PS1+="${Cya}Need to push(${BRed}${npushed//[[:blank:]]/}${Cya})${RCol} "
			else
			    PS1+="${On_Red}Diverged${RCol} "
			fi

			if [ "$modified" -gt "0" ]; then
				PS1+="M:${BYel}${modified//[[:blank:]]/}${RCol} "
			fi;

			if [ "$untracked" -gt "0" ]; then
				PS1+="U:${BYel}${untracked//[[:blank:]]/}${RCol} "
			fi;

			if [ "$staged" -gt "0" ]; then
				PS1+="S:${BGre}${staged//[[:blank:]]/}${RCol} "
			fi;

      newline=true
		fi;

    gemcount=`cat Gemfile 2>/dev/null | grep "gem '" | grep -v "#" | wc -l`


    if [ "$gemcount" -gt "0" ]; then

      gemset=`cat .ruby-gemset 2>/dev/null`

      if [ "$gemset" = "" ];then
        gemcolor="${Red}"
        gemset="N/A"
      else
        gemcolor="${BPur}"
      fi;

      rubyversion=`cat .ruby-version 2>/dev/null`

      PS1+="${IWhi}[${gemcolor}${gemset//[[:blank:]]/}${IBlu}:${IWhi}${gemcount//[[:blank:]]/}${IBlu}-${Cya}$rubyversion${IWhi}]${RCol}"

      # too slow
      # check="$(bundle check | grep 'bundle install')"
      # if [ "$check" != "" ]; then
      #   PS1+=" ${Red}bundle install!${RCol}"
      # fi;

      newline=true
    fi;

    if [ "$isGit" = true ]; then
      PS1+="\n"
    fi;

		currentPath=`pwd`

		# if [ "$(echo -n $currentPath | wc -m)" -gt "20" ]; then
    #   D2=$(dirname $currentPath)
    #   currentPath=$(basename $D2 2>/dev/null)/$(basename $currentPath 2>/dev/null)
    #   PS1+="$currentPath"
		# else
		# 	PS1+="$currentPath"
		# fi;

    homefolder="Users/$USER"
    replace="a"
    #currentPath="$(echo $currentPath | sed -e "s/Users/ricardoperre/aaa/g")"

    #echo $currentPath | sed -e "s/${homefolder}/${replace}/g"
    #echo $currentPath | sed -e "s/$homefolder/${replace}/g"

    #echo ${currentPath///Users\/$USER/'~'}

    PS1+="${Cya}\w${RCol}"

		if [ $EXIT != 0 ]; then
        PS1+="${Red}$ ${RCol}"
    else
        PS1+="${Gre}$ ${RCol}"
    fi
}
#echo -e "✪ Loaded rprompt `cat ~/.rprompt/VERSION`"
echo -e "\033[2m✪ `uptime` ✪\033[0m"
